import os
import asyncio
import logging
import sys
import shlex
import hashlib
from typing import Dict, Any, Optional
from aiogram.enums import ParseMode
from cryptography.exceptions import UnsupportedAlgorithm

import asyncssh
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa, ed25519
from dotenv import load_dotenv

BOT_DIR = os.path.dirname(os.path.abspath(__file__))
LOG_DIR = os.path.join(BOT_DIR, 'logs')

load_dotenv()



# –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—ã–π logger –î–û –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def setup_logging():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global logger
    
    # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs(LOG_DIR, exist_ok=True)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞
    log_file = os.path.join(LOG_DIR, 'bot.log')
    
    # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Windows
    if os.name == 'nt':
        import sys
        sys.stdout.reconfigure(encoding='utf-8')
        sys.stderr.reconfigure(encoding='utf-8')
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –ª–æ–≥–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if os.path.exists(log_file):
            try:
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ FileHandler'—ã
                for handler in logging.root.handlers[:]:
                    if isinstance(handler, logging.FileHandler):
                        handler.close()
                        logging.root.handlers.remove(handler)
                
                # –¢–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ–º
                if os.path.exists(log_file):
                    os.remove(log_file)
                    
                logger.info("üßπ –°—Ç–∞—Ä—ã–π –ª–æ–≥-—Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω (Windows)")
            except (PermissionError, OSError) as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –ª–æ–≥: {e}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–æ–≤—ã–π FileHandler
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setFormatter(logging.Formatter(log_format))
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ handlers –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        logging.root.handlers.clear()
        logging.root.addHandler(file_handler)
        logging.root.addHandler(logging.StreamHandler(sys.stdout))
        logging.root.setLevel(logging.INFO)
        
    else:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Unix/Linux/Mac
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –ª–æ–≥–∞
            if os.path.exists(log_file):
                os.remove(log_file)
                logger.info("üßπ –°—Ç–∞—Ä—ã–π –ª–æ–≥-—Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω (Unix)")
        except (PermissionError, OSError) as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –ª–æ–≥: {e}")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–æ–≤—ã–π FileHandler
        file_handler = logging.FileHandler(log_file, encoding='utf-8')
        file_handler.setFormatter(logging.Formatter(log_format))
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ handlers –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        logging.root.handlers.clear()
        logging.root.addHandler(file_handler)
        logging.root.addHandler(logging.StreamHandler())
        logging.root.setLevel(logging.INFO)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤—Å–µ—Ö handlers
    for handler in logging.root.handlers:
        handler.setFormatter(logging.Formatter(log_format))
    
    logger.info("üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    return logger

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
    logger.error("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
    logger.error("   BOT_TOKEN=1234567890:ABCdefGHIjklMNOpqrSTU")
    logger.error("üí° –®–∞–±–ª–æ–Ω: —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example ‚Üí .env")
    logger.error("üí° –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω: @BotFather –≤ Telegram")
    
    # –î–ª—è Docker –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    if os.path.exists('/.dockerenv') or os.getenv('DOCKER_CONTAINER'):
        logger.error("üê≥ DOCKER: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å --env-file .env")
        logger.error("üê≥ –ü—Ä–∏–º–µ—Ä: docker run --env-file .env your_image")
    
    sys.exit(1)

logger.info(f"‚úÖ BOT_TOKEN —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω (–¥–ª–∏–Ω–∞: {len(BOT_TOKEN)} —Å–∏–º–≤–æ–ª–æ–≤)")
logger.info("üîê –ö—Ä–∏–ø—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logging()

PM2_RUNNING = os.getenv('BOT_TYPE') == 'docker-pm2' or 'pm2' in ' '.join(sys.argv).lower()

if PM2_RUNNING:
    logger.info("üöÄ PM2 detected - running in production mode")
    os.environ['PYTHONUNBUFFERED'] = '1'

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è Docker)
if os.path.ismount(LOG_DIR):
    logger.info("‚úÖ Logs directory is mounted (Docker)")
else:
    logger.info("‚úÖ Local logs directory ready")

if PM2_RUNNING:
    # –ü–µ—Ä–µ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è PM2 (—Ç–æ–ª—å–∫–æ stdout)
    for handler in logging.root.handlers[:]:
        if isinstance(handler, logging.FileHandler):
            try:
                handler.close()
                logging.root.handlers.remove(handler)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å file handler –¥–ª—è PM2: {e}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ StreamHandler
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
    
    logging.root.handlers.clear()
    logging.root.addHandler(console_handler)
    logging.root.setLevel(logging.INFO)
    
    logger.info("üìù PM2 logging configured (stdout only)")


bot = Bot(token=os.getenv("BOT_TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class CryptoSteps(StatesGroup):
    main_menu = State()
    ssh_menu = State()
    choose_ssh_key_type = State()
    ssh_get_passphrase = State()
    ssh_get_server_info = State()
    ssh_get_existing_public_key = State()
    ssh_get_server_info_for_existing = State()
    ssh_wait_for_password = State()
    ssh_wait_for_2fa = State()
    hash_menu = State()
    hash_choose_algorithm = State()
    hash_get_input = State()


def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîë SSH-–∫–ª—é—á–∏", callback_data="ssh_menu")],
        [InlineKeyboardButton(text="üîê –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="hash_menu")]
    ])

def get_ssh_menu_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π SSH-–∫–ª—é—á", callback_data="ssh_generate")],
        [InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π", callback_data="ssh_export")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def get_ssh_key_type_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="RSA (4096)", callback_data="ssh_key_rsa"),
         InlineKeyboardButton(text="Ed25519", callback_data="ssh_key_ed25519")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="ssh_menu")]
    ])

def get_hash_menu_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîê –í—ã—á–∏—Å–ª–∏—Ç—å —Ö–µ—à", callback_data="hash_calculate")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º", callback_data="hash_info")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def get_hash_algorithm_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="MD5", callback_data="hash_md5"),
         InlineKeyboardButton(text="SHA-1", callback_data="hash_sha1")],
        [InlineKeyboardButton(text="SHA-256", callback_data="hash_sha256"),
         InlineKeyboardButton(text="SHA-512", callback_data="hash_sha512")],
        [InlineKeyboardButton(text="BLAKE2b", callback_data="hash_blake2b"),
         InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="hash_menu")]
    ])

def get_ssh_export_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä", callback_data="ssh_export_server")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è SSH-–º–µ–Ω—é", callback_data="ssh_menu")]
    ])

def get_cancel_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ])

def get_passphrase_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ë–µ–∑ passphrase", callback_data="no_passphrase")]
    ])

async def set_bot_commands():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –≤ BotFather"""
    commands = [
        types.BotCommand(
            command="start",
            description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        ),
        types.BotCommand(
            command="help", 
            description="üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º"
        )
    ]
    
    try:
        await bot.set_my_commands(commands)
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ BotFather")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")

@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.clear()
    await message.answer(
        "üîê *–ö—Ä–∏–ø—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä*\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å:\n"
        "‚Ä¢ SSH-–∫–ª—é—á–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤\n"
        "‚Ä¢ –•–µ—à–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_main_menu_keyboard(),
        parse_mode=ParseMode.MARKDOWN
    )
    await state.set_state(CryptoSteps.main_menu)

@dp.message(Command("help"))
async def cmd_help(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    await state.clear()
    
    help_text = (
        "üîë *Crypto Key Generator* ‚Äî –≤–∞—à –∫—Ä–∏–ø—Ç–æ-–∞—Ä—Å–µ–Ω–∞–ª\n\n"
        
        "üéØ *–ß—Ç–æ —è —É–º–µ—é:*\n\n"
        
        "**üîê SSH-–∫–ª—é—á–∏:**\n"
        "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è RSA 4096 –±–∏—Ç –∏ Ed25519\n"
        "‚Ä¢ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å —Å–µ–∫—Ä–µ—Ç–Ω–æ–π —Ñ—Ä–∞–∑–æ–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
        "‚Ä¢ –î–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞: OpenSSH (.pem) + PKCS#8 (PEM)\n\n"
        
        "**üì§ –≠–∫—Å–ø–æ—Ä—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä:**\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–∞—Ä–æ–ª—è –∏ 2FA\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ ~/.ssh/authorized\\_keys\n"
        "‚Ä¢ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: chmod 700\\/600\n\n"
        
        "**üîç –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ:**\n"
        "‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º—ã: MD5, SHA-1, SHA-256, SHA-512, BLAKE2b\n"
        "‚Ä¢ *–§–∞–π–ª—ã –¥–æ 20 –ú–ë* (–ª–∏–º–∏—Ç Bot API) + –ª—é–±–æ–π —Ç–µ–∫—Å—Ç\n"
        "‚Ä¢ Hex-—Ñ–æ—Ä–º–∞—Ç, –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n"
        "‚ö†Ô∏è *–î–ª—è —Ñ–∞–π–ª–æ–≤ >20 –ú–ë:* —Å–æ–∂–º–∏—Ç–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å—ã\n\n"

        "**‚ö†Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**\n"
        "‚Ä¢ –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏ ‚Äî –≤–∞—à —Å–µ–∫—Ä–µ—Ç!\n"
        "‚Ä¢ –ë–µ–∑ —Å–µ–∫—Ä–µ—Ç–Ω–æ–π —Ñ—Ä–∞–∑—ã = —Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ –∑–æ–ª–æ—Ç–æ\n"
        "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞—Ä–æ–ª—è–º–∏ —É–¥–∞–ª—è—é—Ç—Å—è\n\n"
        
        "**üë®‚Äçüíª –î–ª—è –∫–æ–≥–æ:** –°–∏—Å—Ç–µ–º–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã, DevOps, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏\n\n"
        "üí° *–ù–∞—á–Ω–∏—Ç–µ —Å /start*"
    )
    
    try:
        await message.answer(
            help_text,
            reply_markup=get_main_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.warning(f"Markdown –æ—à–∏–±–∫–∞ –≤ /help: {e}. –û—Ç–ø—Ä–∞–≤–ª—è—é plain text.")
        plain_text = help_text.replace('*', '').replace('\\', '').replace('_', '')
        await message.answer(
            plain_text,
            reply_markup=get_main_menu_keyboard()
        )



        

@dp.callback_query(StateFilter(CryptoSteps.main_menu), lambda c: c.data == "ssh_menu")
async def ssh_menu_handler(query: types.CallbackQuery, state: FSMContext):
    """SSH-–º–µ–Ω—é"""
    await query.message.edit_text(
        "üîë *SSH-–∫–ª—é—á–∏*\n\n"
        "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SSH-–∫–ª—é—á–∞–º–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º:",
        reply_markup=get_ssh_menu_keyboard(),
        parse_mode=ParseMode.MARKDOWN
    )
    await state.set_state(CryptoSteps.ssh_menu)


@dp.callback_query(StateFilter(CryptoSteps.main_menu), lambda c: c.data == "hash_menu")
async def hash_menu_handler(query: types.CallbackQuery, state: FSMContext):
    """–•–µ—à-–º–µ–Ω—é"""
    await query.message.edit_text(
        "üîê *–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ*\n\n"
        "–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—É–º–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤:",
        reply_markup=get_hash_menu_keyboard(),
        parse_mode=ParseMode.MARKDOWN
    )
    await state.set_state(CryptoSteps.hash_menu)


# === SSH SECTION ===
@dp.callback_query(StateFilter(CryptoSteps.ssh_menu), lambda c: c.data == "ssh_generate")
async def ssh_start_key_generation(query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SSH-–∫–ª—é—á–∞"""
    await query.message.edit_text(
        "üîë *–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SSH-–∫–ª—é—á–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–ª—é—á–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
        reply_markup=get_ssh_key_type_keyboard(),
        parse_mode=ParseMode.MARKDOWN
    )
    await state.set_state(CryptoSteps.choose_ssh_key_type)


@dp.callback_query(StateFilter(CryptoSteps.ssh_menu), lambda c: c.data == "ssh_export")
async def ssh_start_existing_key_export(query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ SSH-–∫–ª—é—á–∞"""
    await query.message.edit_text(
        "üì§ *–≠–∫—Å–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ SSH-–∫–ª—é—á–∞*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à *–ø—É–±–ª–∏—á–Ω—ã–π* SSH-–∫–ª—é—á (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ `.pub`):",
        reply_markup=get_cancel_keyboard(),
        parse_mode=ParseMode.MARKDOWN
    )
    await state.set_state(CryptoSteps.ssh_get_existing_public_key)


@dp.message(StateFilter(CryptoSteps.ssh_get_existing_public_key))
async def ssh_process_existing_public_key(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ SSH-–∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    public_key_input = message.text.strip() if message.text else ""
    
    if public_key_input.startswith(("ssh-rsa", "ssh-ed25519")):
        await state.update_data(public_key=public_key_input)
        await message.answer(
            "‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –ø—Ä–∏–Ω—è—Ç!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
            "`–∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è@ip_–∞–¥—Ä–µ—Å`\n\n"
            "*–ù–∞–ø—Ä–∏–º–µ—Ä:* `root@192.168.1.1`",
            reply_markup=get_cancel_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
        await state.set_state(CryptoSteps.ssh_get_server_info_for_existing)
    else:
        await message.answer(
            "‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π SSH-–∫–ª—é—á.\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ `.pub` (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å `ssh-rsa` –∏–ª–∏ `ssh-ed25519`).\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
            reply_markup=get_cancel_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )


@dp.callback_query(StateFilter(CryptoSteps.choose_ssh_key_type), lambda c: c.data.startswith("ssh_key_"))
async def ssh_request_passphrase(query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å passphrase –¥–ª—è SSH-–∫–ª—é—á–∞"""
    key_type = "RSA" if query.data == "ssh_key_rsa" else "Ed25519"
    await state.update_data(key_type=key_type, chat_id=query.message.chat.id)
    
    await query.message.edit_text(
        "üîê *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–µ–∫—Ä–µ—Ç–Ω—É—é —Ñ—Ä–∞–∑—É –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):\n\n"
        "*–°–µ–∫—Ä–µ—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞ ‚Äî —ç—Ç–æ –ø–∞—Ä–æ–ª—å –¥–ª—è –∑–∞—â–∏—Ç—ã –∫–ª—é—á–∞. "
        "–ë–µ–∑ –Ω–µ–≥–æ –ª—é–±–æ–π, –∫—Ç–æ –ø–æ–ª—É—á–∏—Ç —Ñ–∞–π–ª, —Å–º–æ–∂–µ—Ç –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.*\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ passphrase.",
        reply_markup=get_passphrase_keyboard(),
        parse_mode=ParseMode.MARKDOWN
    )
    await state.set_state(CryptoSteps.ssh_get_passphrase)


@dp.callback_query(StateFilter(CryptoSteps.ssh_get_passphrase), lambda c: c.data == "no_passphrase")
async def ssh_generate_key_without_passphrase(query: types.CallbackQuery, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SSH-–∫–ª—é—á–∞ –±–µ–∑ passphrase"""
    await query.message.delete()
    await ssh_generate_key(state, None)


@dp.message(StateFilter(CryptoSteps.ssh_get_passphrase))
async def ssh_generate_key_with_passphrase(message: Message, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SSH-–∫–ª—é—á–∞ —Å passphrase"""
    passphrase = message.text.strip().encode('utf-8') if message.text.strip() else None
    await message.delete()
    await ssh_generate_key(state, passphrase)


async def ssh_generate_key(state: FSMContext, passphrase: Optional[bytes]):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SSH –∫–ª—é—á–µ–π"""
    user_data = await state.get_data()
    key_type = user_data.get("key_type")
    chat_id = user_data.get("chat_id")
    
    generation_msg = await bot.send_message(chat_id, "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é SSH-–∫–ª—é—á–∏...")

    if key_type == "RSA":
        private_key_obj = rsa.generate_private_key(public_exponent=65537, key_size=4096)
        key_info = "RSA (4096 –±–∏—Ç)"
    else:
        private_key_obj = ed25519.Ed25519PrivateKey.generate()
        key_info = "Ed25519"

    encryption = serialization.BestAvailableEncryption(passphrase) if passphrase else serialization.NoEncryption()
    
    # OpenSSH —Ñ–æ—Ä–º–∞—Ç
    try:
        openssh_private_key_bytes = private_key_obj.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.OpenSSH,
            encryption_algorithm=encryption
        )
    except UnsupportedAlgorithm:
        await bot.send_message(
            chat_id, 
            "‚ö†Ô∏è bcrypt –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ö–ª—é—á –±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.\n"
            "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: `pip install bcrypt`",
            parse_mode=ParseMode.MARKDOWN
        )
        encryption = serialization.NoEncryption()
        openssh_private_key_bytes = private_key_obj.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.OpenSSH,
            encryption_algorithm=encryption
        )
    openssh_private_key_str = openssh_private_key_bytes.decode('utf-8')

    # PEM —Ñ–æ—Ä–º–∞—Ç
    try:
        pem_private_key_bytes = private_key_obj.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.PKCS8,
            encryption_algorithm=encryption
        )
    except UnsupportedAlgorithm:
        pem_private_key_bytes = private_key_obj.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.PKCS8,
            encryption_algorithm=serialization.NoEncryption()
        )
    pem_private_key_str = pem_private_key_bytes.decode('utf-8')

    # –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
    public_key_obj = private_key_obj.public_key()
    ssh_public_key_bytes = public_key_obj.public_bytes(
        encoding=serialization.Encoding.OpenSSH,
        format=serialization.PublicFormat.OpenSSH
    )
    public_key_str = ssh_public_key_bytes.decode('utf-8')

    await state.update_data(
        private_key=openssh_private_key_str, 
        public_key=public_key_str,
        key_type=key_info
    )

    await generation_msg.edit_text(f"‚úÖ *{key_info}* –∫–ª—é—á–∏ –≥–æ—Ç–æ–≤—ã!", parse_mode=ParseMode.MARKDOWN)

    await bot.send_document(
        chat_id,
        BufferedInputFile(openssh_private_key_str.encode('utf-8'), 
                         filename=f"id_{key_type.lower().replace(' ', '_')}_openssh.pem"),
        caption=f"üîê *–ü—Ä–∏–≤–∞—Ç–Ω—ã–π SSH-–∫–ª—é—á {key_info}*\n\n"
        f"–§–æ—Ä–º–∞—Ç: OpenSSH\n"
        f"–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: `.pem`\n\n"
        f"‚ö†Ô∏è *–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ –Ω–∞–¥—ë–∂–Ω–æ–º –º–µ—Å—Ç–µ!*",
        parse_mode=ParseMode.MARKDOWN
    )

    await bot.send_document(
        chat_id,
        BufferedInputFile(pem_private_key_str.encode('utf-8'), 
                         filename=f"id_{key_type.lower().replace(' ', '_')}_pem.pem"),
        caption=f"üîê *–ü—Ä–∏–≤–∞—Ç–Ω—ã–π SSH-–∫–ª—é—á {key_info} (PEM)*\n\n"
        f"–§–æ—Ä–º–∞—Ç: PKCS#8\n"
        f"–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: `.pem`\n\n"
        f"üìö –î–ª—è Python/Java/.NET",
        parse_mode=ParseMode.MARKDOWN
    )

    await bot.send_message(
        chat_id,
        f"```\n{public_key_str}\n```"
        f"üîì *–ü—É–±–ª–∏—á–Ω—ã–π SSH-–∫–ª—é—á*\n\n"
        f"–§–æ—Ä–º–∞—Ç: OpenSSH\n"
        f"–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ: `.pub`\n\n"
        f"‚úÖ *–ü–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ã!*",
        parse_mode=ParseMode.MARKDOWN
    )

    if passphrase:
        await bot.send_message(
            chat_id,
            f"üîí *{key_info}* –∑–∞—â–∏—â–µ–Ω—ã passphrase!\n\n"
            f"üí° *–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–∞—Ä–æ–ª—å!*",
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await bot.send_message(
            chat_id,
            f"‚ö†Ô∏è *{key_info}* **–±–µ–∑ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è**!\n\n"
            f"üö® *–•—Ä–∞–Ω–∏—Ç–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!*",
            parse_mode=ParseMode.MARKDOWN
        )

    await bot.send_message(
        chat_id,
        f"üöÄ *–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å {key_info} –Ω–∞ —Å–µ—Ä–≤–µ—Ä?*", parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_ssh_export_keyboard()
    )
    
    await state.set_state(CryptoSteps.ssh_get_server_info)
    await state.update_data(private_key=None)


@dp.callback_query(StateFilter(CryptoSteps.ssh_get_server_info), lambda c: c.data == "ssh_export_server")
async def ssh_request_server_info(query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å SSH-—Å–µ—Ä–≤–µ—Ä–∞"""
    await query.message.edit_text(
        "üåê *SSH-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞:\n\n"
        "`–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å@ip_–∞–¥—Ä–µ—Å`\n\n"
        "*–ü—Ä–∏–º–µ—Ä—ã:*\n"
        "‚Ä¢ `root@192.168.1.100`\n"
        "‚Ä¢ `ubuntu@server.com`",
        reply_markup=get_cancel_keyboard(),
        parse_mode=ParseMode.MARKDOWN
    )


@dp.message(StateFilter(CryptoSteps.ssh_get_server_info, CryptoSteps.ssh_get_server_info_for_existing))
async def ssh_process_server_info(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ SSH-—Å–µ—Ä–≤–µ—Ä–∞"""
    server_input = message.text.strip()
    
    if '@' not in server_input or not server_input.split('@')[0] or not server_input.split('@')[1]:
        await message.answer(
            "*‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!*\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å@—Å–µ—Ä–≤–µ—Ä`\n\n"
            "*–ü—Ä–∏–º–µ—Ä—ã:*\n"
            "‚Ä¢ `root@192.168.1.100`\n"
            "‚Ä¢ `ubuntu@server.com`",
            reply_markup=get_cancel_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    await state.update_data(server_info=server_input, chat_id=message.chat.id)
    user_data = await state.get_data()
    asyncio.create_task(ssh_export_key_to_server(message, user_data))


async def ssh_export_key_to_server(message: Message, user_data: Dict[str, Any]):
    """–≠–∫—Å–ø–æ—Ä—Ç SSH-–∫–ª—é—á–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
    chat_id = message.chat.id
    server_info = user_data.get('server_info')
    public_key = user_data.get('public_key')
    key_type = user_data.get('key_type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')

    if not public_key:
        await bot.send_message(
            chat_id, 
            "*‚ùå* –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!",
            reply_markup=get_main_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
        return

    username, host = server_info.split('@', 1)
    
    connect_msg = await bot.send_message(
        chat_id,
        f"*üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ* –∫ `{server_info}`...\n\n"
        f"**–ö–ª—é—á:** {key_type}\n"
        f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {username}",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_cancel_keyboard()
    )
    
    await bot.send_message(
        chat_id,
        "*‚ö†Ô∏è –í–ê–ñ–ù–û:* –ü—Ä–æ–≤–µ—Ä—å—Ç–µ fingerprint —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!",
        parse_mode=ParseMode.MARKDOWN
    )

    password_prompt = await bot.send_message(
        chat_id,
        f"*üîë –ü–∞—Ä–æ–ª—å* –¥–ª—è `{username}@{host}`:\n\n"
        f"*–ü–æ—Å–ª–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ ‚Äî –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑ –ø–∞—Ä–æ–ª—è!*",
        reply_markup=get_cancel_keyboard(),
        parse_mode=ParseMode.MARKDOWN
    )
    
    state = dp.fsm.resolve_context(bot, chat_id, chat_id)
    await state.set_state(CryptoSteps.ssh_wait_for_password)
    await state.update_data(
        password_prompt_message_id=password_prompt.message_id,
        connect_message_id=connect_msg.message_id
    )


class CustomSshClient(asyncssh.SSHClient):
    """SSH-–∫–ª–∏–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 2FA"""
    
    def __init__(self, bot_instance, chat_id, state: FSMContext, password: str):
        self._bot = bot_instance
        self._chat_id = chat_id
        self._state = state
        self._password = password
        super().__init__()

    def password_auth_requested(self):
        return self._password

    def kbdint_auth_requested(self):
        return ''

    async def kbdint_challenge_received(self, name, instructions, lang, prompts):
        if not prompts:
            return []

        responses = []
        for prompt_text, _ in prompts:
            future = asyncio.get_event_loop().create_future()
            
            msg = await self._bot.send_message(
                self._chat_id,
                f"*üîê 2FA-–∑–∞–ø—Ä–æ—Å:*\n\n"
                f"`{prompt_text}`\n\n"
                f"*–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥:*",
                reply_markup=get_cancel_keyboard(),
                parse_mode=ParseMode.MARKDOWN
            )
            
            await self._state.update_data(two_fa_future=future, prompt_msg_id=msg.message_id)
            await self._state.set_state(CryptoSteps.ssh_wait_for_2fa)
            
            try:
                response = await asyncio.wait_for(future, timeout=120.0)
                responses.append(response)
            except asyncio.TimeoutError:
                await self._bot.send_message(
                    self._chat_id,
                    "*‚è∞* –í—Ä–µ–º—è 2FA –∏—Å—Ç–µ–∫–ª–æ!",
                    reply_markup=get_main_menu_keyboard(),
                    parse_mode=ParseMode.MARKDOWN
                )
                raise asyncssh.DisconnectError("2FA timeout", asyncssh.DISCONNECT_AUTH_CANCELLED)

        return responses


@dp.message(StateFilter(CryptoSteps.ssh_wait_for_2fa))
async def ssh_process_2fa_code(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ 2FA –¥–ª—è SSH"""
    user_data = await state.get_data()
    future = user_data.get("two_fa_future")
    
    if future and not future.done():
        future.set_result(message.text.strip())
    
    try:
        await message.delete()
        prompt_msg_id = user_data.get('prompt_msg_id')
        if prompt_msg_id:
            await bot.delete_message(message.chat.id, prompt_msg_id)
    except Exception:
        pass
    
    await state.set_state(CryptoSteps.ssh_wait_for_password)


@dp.message(StateFilter(CryptoSteps.ssh_wait_for_password))
async def ssh_handle_connection(message: Message, state: FSMContext):
    """SSH-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —ç–∫—Å–ø–æ—Ä—Ç"""
    password = message.text.strip()
    chat_id = message.chat.id
    user_data = await state.get_data()
    
    try:
        await message.delete()
        prompt_id = user_data.get('password_prompt_message_id')
        if prompt_id:
            await bot.delete_message(chat_id, prompt_id)
        connect_id = user_data.get('connect_message_id')
        if connect_id:
            await bot.delete_message(chat_id, connect_id)
    except Exception:
        pass

    if password.lower() in ["–æ—Ç–º–µ–Ω–∞", "cancel"]:
        await bot.send_message(chat_id, "*‚ùå* –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–º–µ–Ω—ë–Ω!", reply_markup=get_main_menu_keyboard(), parse_mode=ParseMode.MARKDOWN)
        await state.clear()
        return

    server_info = user_data.get('server_info')
    if not server_info:
        await bot.send_message(chat_id, "*‚ùå* –î–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", reply_markup=get_main_menu_keyboard(), parse_mode=ParseMode.MARKDOWN)
        await state.clear()
        return

    username, host = server_info.split('@', 1)
    public_key = user_data.get('public_key')
    key_type = user_data.get('key_type', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')

    if not public_key:
        await bot.send_message(chat_id, "*‚ùå* –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=get_main_menu_keyboard(), parse_mode=ParseMode.MARKDOWN)
        await state.clear()
        return

    auth_msg = await bot.send_message(chat_id, f"*üîê* –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è `{server_info}`...")

    try:
        client_factory = lambda: CustomSshClient(bot, chat_id, state, password)
        
        async with asyncssh.connect(host=host, username=username, client_factory=client_factory, connect_timeout=15) as conn:
            await auth_msg.edit_text("*‚úÖ* –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –î–æ–±–∞–≤–ª—è—é –∫–ª—é—á...")

            safe_public_key = shlex.quote(public_key.strip())
            command = (
                f'mkdir -p ~/.ssh && chmod 700 ~/.ssh && '
                f'if ! grep -qF "{safe_public_key}" ~/.ssh/authorized_keys 2>/dev/null; then '
                f'echo "{safe_public_key}" >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys && '
                f'echo "Key added"; else echo "Key exists"; fi'
            )
            
            result = await conn.run(command, check=False)
            
            if result.exit_status == 0:
                output = result.stdout.decode('utf-8').strip()
                if "exists" in output.lower():
                    await auth_msg.edit_text(
                        f"*‚ÑπÔ∏è* –ö–ª—é—á *{key_type}* —É–∂–µ –µ—Å—Ç—å –Ω–∞ `{server_info}`!\n\n"
                        f"*‚úÖ* –¢–µ–ø–µ—Ä—å: `ssh {server_info}` –±–µ–∑ –ø–∞—Ä–æ–ª—è!",
                        parse_mode=ParseMode.MARKDOWN
                    )
                else:
                    await auth_msg.edit_text(
                        f"*‚úÖ* –ö–ª—é—á *{key_type}* –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ `{server_info}`!\n\n"
                        f"*üéâ* –¢–µ–ø–µ—Ä—å: `ssh {server_info}` –±–µ–∑ –ø–∞—Ä–æ–ª—è!",
                        parse_mode=ParseMode.MARKDOWN
                    )
            else:
                await auth_msg.edit_text(
                    f"*‚ö†Ô∏è* –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:\n\n"
                    f"`{result.stderr.decode('utf-8').strip()[:200]}`\n\n"
                    f"*üîß* –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ `~/.ssh` –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.",
                    parse_mode=ParseMode.MARKDOWN
                )

    except asyncssh.PermissionDenied:
        await auth_msg.edit_text(
            "*‚ùå* –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏\n\n"
            f"*üîë* –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è `{username}@{host}`\n"
            "*üîê* –ò–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ 2FA\n\n"
            "*–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:*",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_main_menu_keyboard()
        )
    except asyncssh.HostKeyNotVerifiable:
        await auth_msg.edit_text(
            "*‚ùå* –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ö–æ—Å—Ç–æ–º\n\n"
            "*üîí* –°–µ—Ä–≤–µ—Ä –Ω–µ –≤ known_hosts\n\n"
            "**–†–µ—à–µ–Ω–∏–µ:**\n"
            "1. `ssh -v username@host` –≤—Ä—É—á–Ω—É—é\n"
            "2. –ü—Ä–∏–Ω—è—Ç—å fingerprint\n"
            "3. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_main_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"SSH –æ—à–∏–±–∫–∞: {e}")
        await auth_msg.edit_text(
            f"*üí•* –û—à–∏–±–∫–∞: `{str(e)[:100]}`\n\n"
            "*üîß* –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_main_menu_keyboard()
        )
    finally:
        await state.clear()
        await state.set_state(CryptoSteps.main_menu)


# === HASH SECTION ===
@dp.callback_query(StateFilter(CryptoSteps.hash_menu), lambda c: c.data == "hash_calculate")
async def hash_calculate_handler(query: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∞–ª–≥–æ—Ä–∏—Ç–º–∞ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await query.message.edit_text(
        "üîê *–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö–µ—à–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_hash_algorithm_keyboard(),
        parse_mode=ParseMode.MARKDOWN
    )
    await state.set_state(CryptoSteps.hash_choose_algorithm)


@dp.callback_query(StateFilter(CryptoSteps.hash_menu), lambda c: c.data == "hash_info")
async def hash_info_handler(query: types.CallbackQuery, state: FSMContext):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º"""
    info_text = (
        "*üìä –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"
        "**MD5:** 128 –±–∏—Ç, —É—Å—Ç–∞—Ä–µ–ª, —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏\n"
        "**SHA-1:** 160 –±–∏—Ç, —É—Å—Ç–∞—Ä–µ–ª, –Ω–µ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n"
        "**SHA-256:** 256 –±–∏—Ç, —Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–µ–π\n"
        "**SHA-512:** 512 –±–∏—Ç, –≤—ã—Å–æ–∫–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n"
        "**BLAKE2b:** 512 –±–∏—Ç, –±—ã—Å—Ç—Ä—ã–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π\n\n"
        "*üîí –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: SHA-256 –∏–ª–∏ BLAKE2b*"
    )
    
    await query.message.edit_text(
        info_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="hash_menu")]
        ]),
        parse_mode=ParseMode.MARKDOWN
    )


@dp.callback_query(StateFilter(CryptoSteps.hash_choose_algorithm), lambda c: c.data.startswith("hash_"))
async def hash_request_input(query: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    algo_map = {
        "hash_md5": "MD5",
        "hash_sha1": "SHA-1", 
        "hash_sha256": "SHA-256",
        "hash_sha512": "SHA-512",
        "hash_blake2b": "BLAKE2b"
    }
    
    algorithm = algo_map.get(query.data, "SHA-256")
    await state.update_data(hash_algorithm=algorithm, chat_id=query.message.chat.id)
    
    input_text = (
        f"üîê *–•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ {algorithm}*\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ö–µ—à–∞:\n\n"
        "**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:**\n"
        "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ –ª–∏–º–∏—Ç–∞)\n"
        "‚Ä¢ *–§–∞–π–ª—ã –¥–æ 20 –ú–ë* (–ª–∏–º–∏—Ç Bot API)\n\n"
        "**‚ö†Ô∏è –í–∞–∂–Ω–æ:**\n"
        "‚Ä¢ –§–∞–π–ª—ã >20 –ú–ë: —Å–æ–∂–º–∏—Ç–µ (zip/7z)\n"
        "‚Ä¢ –§–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 24—á: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ\n\n"
        "*–•–µ—à –±—É–¥–µ—Ç –≤ hex-—Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä)*"
    )
    
    await query.message.edit_text(
        input_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="hash_info")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í—ã–±–æ—Ä –∞–ª–≥–æ—Ä–∏—Ç–º–∞", callback_data="hash_calculate")]
        ]),
        parse_mode=ParseMode.MARKDOWN
    )
    await state.set_state(CryptoSteps.hash_get_input)


@dp.message(StateFilter(CryptoSteps.hash_get_input))
async def hash_process_input(message: Message, state: FSMContext):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö–µ—à–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª–∞"""
    user_data = await state.get_data()
    algorithm = user_data.get("hash_algorithm", "SHA-256")
    chat_id = user_data.get("chat_id")
    
    result_msg = await bot.send_message(chat_id, f"*üîÑ –í—ã—á–∏—Å–ª—è—é {algorithm}-—Ö–µ—à...*",parse_mode=ParseMode.MARKDOWN)
    
    try:
        if message.document:
            file_size_limit = 20 * 1024 * 1024
            telegram_upload_limit = 50 * 1024 * 1024
            
            if message.document.file_size:
                file_size_bytes = message.document.file_size
                
                if file_size_bytes > file_size_limit:
                    file_size_mb = file_size_bytes / (1024 * 1024)
                    await result_msg.edit_text(
                        f"*‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –±–æ—Ç–∞!*\n\n"
                        f"üìè –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} –ú–ë\n"
                        f"ü§ñ *–õ–∏–º–∏—Ç –±–æ—Ç–∞:* 20 –ú–ë\n"
                        f"üì± *–õ–∏–º–∏—Ç Telegram:* 50 –ú–ë\n\n"
                        f"*üí° –†–µ—à–µ–Ω–∏—è:*\n"
                        f"‚Ä¢ –°–æ–∂–º–∏—Ç–µ —Ñ–∞–π–ª –¥–æ <20 –ú–ë\n"
                        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å—ã\n"
                        f"‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–∞\n\n"
                        f"*‚ö° –î–ª—è —Ç–µ–∫—Å—Ç–∞ –ª–∏–º–∏—Ç–∞ –Ω–µ—Ç!*",
                        parse_mode=ParseMode.MARKDOWN
                    )
                    return
                
                if file_size_bytes > telegram_upload_limit:
                    await result_msg.edit_text(
                        f"*‚ùå –§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram!*\n\n"
                        f"üìè –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} –ú–ë\n"
                        f"üì± *–ú–∞–∫—Å–∏–º—É–º:* 50 –ú–ë\n\n"
                        f"*üí° –°–æ–∂–º–∏—Ç–µ —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ*",
                        parse_mode=ParseMode.MARKDOWN
                    )
                    return
            
            filename = message.document.file_name or "file"
            file_id = message.document.file_id
            
            try:
                file_info = await bot.get_file(file_id)
                
                if not file_info.file_path:
                    raise Exception("File path not available")
                
                if file_info.file_size and file_info.file_size > file_size_limit:
                    file_size_mb = file_info.file_size / (1024 * 1024)
                    await result_msg.edit_text(
                        f"*‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π!*\n\n"
                        f"üìè –†–∞–∑–º–µ—Ä: {file_size_mb:.1f} –ú–ë\n"
                        f"ü§ñ *–õ–∏–º–∏—Ç –±–æ—Ç–∞:* 20 –ú–ë\n\n"
                        f"*üí° –°–æ–∂–º–∏—Ç–µ —Ñ–∞–π–ª –¥–æ <20 –ú–ë*",
                        parse_mode=ParseMode.MARKDOWN
                    )
                    return
                
                logger.info(f"–°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª: {filename} ({file_info.file_size} –±–∞–π—Ç)")
                file = await bot.download_file(file_info.file_path)
                file_data = file.read()
                
                if not file_data:
                    raise Exception("–§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å")
                
                hash_value = calculate_file_hash(file_data, algorithm.lower())
                
                file_size_formatted = f"{len(file_data):,} –±–∞–π—Ç"
                if len(file_data) > 1024 * 1024:
                    file_size_mb = len(file_data) / (1024 * 1024)
                    file_size_formatted = f"{file_size_mb:.1f} –ú–ë"
                elif len(file_data) > 1024:
                    file_size_kb = len(file_data) / 1024
                    file_size_formatted = f"{file_size_kb:.1f} –ö–ë"
                
                await result_msg.edit_text(
                    f"*üìé –•–µ—à —Ñ–∞–π–ª–∞:* `{filename}`\n\n"
                    f"**{algorithm}:** `{hash_value}`\n\n"
                    f"*üìè –†–∞–∑–º–µ—Ä:* {file_size_formatted}\n"
                    f"*‚úÖ –ì–æ—Ç–æ–≤–æ!*",
                    parse_mode=ParseMode.MARKDOWN
                )
                
            except Exception as file_error:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º {file_id}: {file_error}")
                error_msg = str(file_error).lower()
                
                if "too big" in error_msg or "file is too big" in error_msg:
                    await result_msg.edit_text(
                        f"*üí• –û—à–∏–±–∫–∞ Telegram API:*\n\n"
                        f"**–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –±–æ—Ç–∞**\n\n"
                        f"*ü§ñ –õ–∏–º–∏—Ç Bot API:* 20 –ú–ë\n"
                        f"*üì± –õ–∏–º–∏—Ç –∫–ª–∏–µ–Ω—Ç–∞:* 50 –ú–ë\n\n"
                        f"*üîß –†–µ—à–µ–Ω–∏–µ:*\n"
                        f"‚Ä¢ –°–æ–∂–º–∏—Ç–µ —Ñ–∞–π–ª (zip, 7z)\n"
                        f"‚Ä¢ –†–∞–∑–¥–µ–ª–∏—Ç–µ –Ω–∞ —á–∞—Å—Ç–∏ <20 –ú–ë\n"
                        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç\n\n"
                        f"*‚ö° –î–ª—è —Ñ–∞–π–ª–æ–≤ >20 –ú–ë:* –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å—ã",
                        parse_mode=ParseMode.MARKDOWN
                    )
                elif "file not found" in error_msg or "404" in error_msg:
                    await result_msg.edit_text(
                        f"*üí• –§–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:*\n\n"
                        f"**–§–∞–π–ª —É–¥–∞–ª—ë–Ω —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ Telegram**\n\n"
                        f"*‚è∞ –°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è:* 24 —á–∞—Å–∞\n\n"
                        f"*üì§ –†–µ—à–µ–Ω–∏–µ:*\n"
                        f"‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ\n"
                        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–µ–∂–∏–µ —Ñ–∞–π–ª—ã\n\n"
                        f"*‚ö†Ô∏è –§–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 24—á –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã*",
                        parse_mode=ParseMode.MARKDOWN
                    )
                else:
                    await result_msg.edit_text(
                        f"*üí• –û—à–∏–±–∫–∞ —Å —Ñ–∞–π–ª–æ–º:*\n\n"
                        f"`{str(file_error)[:100]}`\n\n"
                        f"*üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:*\n"
                        f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é\n"
                        f"‚Ä¢ –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω\n"
                        f"‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API\n\n"
                        f"*üì§ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ*",
                        parse_mode=ParseMode.MARKDOWN
                    )
                return
                
        elif message.text:
            text_hash = calculate_text_hash(message.text, algorithm.lower())
            text_length = len(message.text)
            
            if text_length > 1000:
                text_length_formatted = f"{text_length:,} —Å–∏–º–≤–æ–ª–æ–≤"
            else:
                text_length_formatted = f"{text_length} —Å–∏–º–≤–æ–ª–æ–≤"
            
            await result_msg.edit_text(
                f"*üìù –•–µ—à —Ç–µ–∫—Å—Ç–∞*\n\n"
                f"**{algorithm}:** `{text_hash}`\n\n"
                f"*üìè –î–ª–∏–Ω–∞:* {text_length_formatted}\n"
                f"*‚úÖ –ì–æ—Ç–æ–≤–æ!*",
                parse_mode=ParseMode.MARKDOWN
            )
            
        else:
            await result_msg.edit_text(
                "*‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ!*\n\n"
                "*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:*\n"
                "‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ –ª–∏–º–∏—Ç–∞)\n"
                "‚Ä¢ –§–∞–π–ª—ã –¥–æ 20 –ú–ë\n\n"
                "*üí° –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤:* \n"
                "‚Ä¢ –°–æ–∂–º–∏—Ç–µ –¥–æ <20 –ú–ë\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å—ã\n"
                "*üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª*",
                parse_mode=ParseMode.MARKDOWN
            )
            
    except Exception as e:
        logger.error(f"–û–±—â–∞—è —Ö–µ—à-–æ—à–∏–±–∫–∞: {e}")
        await result_msg.edit_text(
            f"*üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:*\n\n"
            f"`{str(e)[:100]}`\n\n"
            f"*üîß –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É*",
            parse_mode=ParseMode.MARKDOWN
        )


def calculate_text_hash(text: str, algorithm: str) -> str:
    """–•–µ—à —Ç–µ–∫—Å—Ç–∞"""
    hash_functions = {
        'md5': hashlib.md5,
        'sha1': hashlib.sha1,
        'sha256': hashlib.sha256,
        'sha512': hashlib.sha512,
        'blake2b': lambda data: hashlib.blake2b(data, digest_size=64)
    }
    
    if algorithm not in hash_functions:
        algorithm = 'sha256'
    
    h = hash_functions[algorithm](text.encode('utf-8'))
    return h.hexdigest()


def calculate_file_hash(file_data: bytes, algorithm: str) -> str:
    """–•–µ—à —Ñ–∞–π–ª–∞"""
    hash_functions = {
        'md5': hashlib.md5,
        'sha1': hashlib.sha1,
        'sha256': hashlib.sha256,
        'sha512': hashlib.sha512,
        'blake2b': lambda data: hashlib.blake2b(data, digest_size=64)
    }
    
    if algorithm not in hash_functions:
        algorithm = 'sha256'
    
    h = hash_functions[algorithm](file_data)
    return h.hexdigest()


@dp.callback_query(lambda c: c.data in ["cancel", "back_main", "main_menu", "ssh_menu", "hash_menu"])
async def handle_navigation(query: types.CallbackQuery, state: FSMContext):
    """–û–±—â–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è"""
    await query.answer()
    
    if query.data == "cancel":
        await query.message.delete()
        await state.clear()
    
    data_map = {
        "back_main": "main_menu",
        "main_menu": get_main_menu_keyboard(),
        "ssh_menu": (get_ssh_menu_keyboard(), CryptoSteps.ssh_menu),
        "hash_menu": (get_hash_menu_keyboard(), CryptoSteps.hash_menu)
    }
    
    if query.data in data_map:
        if isinstance(data_map[query.data], tuple):
            keyboard, new_state = data_map[query.data]
            await query.message.edit_text(
                "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
            await state.set_state(new_state)
        else:
            keyboard = data_map[query.data]
            await query.message.edit_text(
                "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
            await state.set_state(CryptoSteps.main_menu)


async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("üöÄ –ö—Ä–∏–ø—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω!")

    await set_bot_commands()
    
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞...")
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞: {e}")
    finally:
        await bot.session.close()
        logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    asyncio.run(main())